diff --git a/src/time-matcher.js b/src/time-matcher.js
index 52a0b8ea5db9914d7e7b7ef74f8da9c8fcdbc181..15511d3c09ad2df60ef83673d6976c7e890adbd6 100644
--- a/src/time-matcher.js
+++ b/src/time-matcher.js
@@ -1,54 +1,55 @@
-const validatePattern = require('./pattern-validation');
-const convertExpression = require('./convert-expression');
+const validatePattern = require("./pattern-validation");
+const convertExpression = require("./convert-expression");
 
-function matchPattern(pattern, value){
-    if( pattern.indexOf(',') !== -1 ){
-        const patterns = pattern.split(',');
-        return patterns.indexOf(value.toString()) !== -1;
-    }
-    return pattern === value.toString();
+function matchPattern(pattern, value) {
+  if (pattern.indexOf(",") !== -1) {
+    const patterns = pattern.split(",");
+    return patterns.indexOf(value.toString()) !== -1;
+  }
+  return pattern === value.toString();
 }
 
-class TimeMatcher{
-    constructor(pattern, timezone){
-        validatePattern(pattern);
-        this.pattern = convertExpression(pattern);
-        this.timezone = timezone;
-        this.expressions = this.pattern.split(' ');
-    }
+class TimeMatcher {
+  constructor(pattern, timezone) {
+    validatePattern(pattern);
+    this.pattern = convertExpression(pattern);
+    this.timezone = timezone;
+    this.expressions = this.pattern.split(" ");
+    this.dtf = this.timezone
+      ? new Intl.DateTimeFormat("en-US", {
+          year: "numeric",
+          month: "2-digit",
+          day: "2-digit",
+          hour: "2-digit",
+          minute: "2-digit",
+          second: "2-digit",
+          hourCycle: "h23",
+          fractionalSecondDigits: 3,
+          timeZone: this.timezone,
+        })
+      : null;
+  }
 
-    match(date){
-        date = this.apply(date);
+  match(date) {
+    date = this.apply(date);
 
-        const runOnSecond = matchPattern(this.expressions[0], date.getSeconds());
-        const runOnMinute = matchPattern(this.expressions[1], date.getMinutes());
-        const runOnHour = matchPattern(this.expressions[2], date.getHours());
-        const runOnDay = matchPattern(this.expressions[3], date.getDate());
-        const runOnMonth = matchPattern(this.expressions[4], date.getMonth() + 1);
-        const runOnWeekDay = matchPattern(this.expressions[5], date.getDay());
+    const runOnSecond = matchPattern(this.expressions[0], date.getSeconds());
+    const runOnMinute = matchPattern(this.expressions[1], date.getMinutes());
+    const runOnHour = matchPattern(this.expressions[2], date.getHours());
+    const runOnDay = matchPattern(this.expressions[3], date.getDate());
+    const runOnMonth = matchPattern(this.expressions[4], date.getMonth() + 1);
+    const runOnWeekDay = matchPattern(this.expressions[5], date.getDay());
 
-        return runOnSecond && runOnMinute && runOnHour && runOnDay && runOnMonth && runOnWeekDay;
-    }
+    return runOnSecond && runOnMinute && runOnHour && runOnDay && runOnMonth && runOnWeekDay;
+  }
 
-    apply(date){
-        if(this.timezone){
-            const dtf = new Intl.DateTimeFormat('en-US', {
-                year: 'numeric',
-                month: '2-digit',
-                day: '2-digit',
-                hour: '2-digit',
-                minute: '2-digit',
-                second: '2-digit',
-                hourCycle: 'h23',
-                fractionalSecondDigits: 3,
-                timeZone: this.timezone
-            });
-            
-            return new Date(dtf.format(date));
-        }
-        
-        return date;
+  apply(date) {
+    if (this.dtf) {
+      return new Date(this.dtf.format(date));
     }
+
+    return date;
+  }
 }
 
 module.exports = TimeMatcher;
